package eecs2030.pe2;

import java.util.HashSet;
import java.util.Set;

/**
* A class that represents a wallet of phone cards.
* Such a wallet has a name and a composed set of phone cards. 
* 
* @author EECS2030
*
*/
public class PhoneCardWallet {
	private String name;
	private Set<PhoneCard> cardSet;
	
	/**
	 * Create a PhoneCardWallet with the given name and an empty set of phone cards.
	 * 
	 * @param name The wallet's name.
	 * @pre. name is not null
	 */
	public PhoneCardWallet(String name) {
		this.name = name;
		this.cardSet = new HashSet<PhoneCard>();
	}

	/**
	 * Create a PhoneCardWallet with the given name and set of phone cards.
	 * A shallow copy of the set of cards is stored in the wallet.
	 * 
	 * @param name The wallet's name.
	 * @param cardSet The set of phone cards to be included in the wallet.
	 * @pre. name and cardSet are not null
	 */
	public PhoneCardWallet(String name, Set<PhoneCard> cardSet) {
		this.name= name;
		this.cardSet = new HashSet<PhoneCard>(cardSet);
	}

	/**
	 * Get the name of this wallet.
	 * 
	 * @return the name of this wallet.
	 */
	public String getName() {
		return this.name;
	}
	
	/**
	 * Get the set of cards contained in this wallet.
	 * A shallow copy of the set of cards in the wallet is returned.
	 * 
	 * @return the set of cards contained in this wallet.
	 */
	public Set<PhoneCard> getCardSet() {
		// we rely on Set copy constructor to make a shallow copy of the card set
		return new HashSet<PhoneCard>(cardSet);
	}
	
	/**
	 * Add the given phone card to this wallet.
	 * 
	 * @param card the phone card to be added.
	 * @pre. card is not null
	 */
	public void addCard(PhoneCard card){
		this.cardSet.add(card);
	}
	
	/**
	 * Remove the given phone card from this wallet.
	 * 
	 * @param card the phone card to be removed.
	 * @pre. card is not null
	 */
	public void removeCard(PhoneCard card){
		this.cardSet.remove(card);
	}
	
	/**
	 * Obtain the set of cards contained in this wallet that could be used
	 * to make a call to the given zone with the given cost.
	 * The method returns the set of all cards in the wallet that allow a
	 * call to the given zone and have a balance greater or equal to cost.
	 * 
	 * @param zone the zone of the call.
	 * @param cost the cost of the call.
	 * @return the set of cards contained in this wallet that could be used to make such a call.
	 * @pre. zone is not null
	 */
	public Set<PhoneCard> filter(CallZone zone, double cost){
		// we use polymorphism here to handle arbitrary types of PhoneCards
		Set<PhoneCard> result = new HashSet<PhoneCard>();
		for (PhoneCard c : this.cardSet){
			if (c.isAllowed(zone) && c.getBalance() >= cost){
				result.add(c);
			}
		}
		return result;
	}
	
	/**
	 * Create a string representation of the wallet.
	 * The string is "PhoneCardWallet named " followed by the wallet's name followed by
	 * " with cards " followed by the wallet's card set's string representation.
	 * 
	 * @return the string representation of the wallet.
	 */
	@Override
	public String toString() {
		return "PhoneCardWallet named " + this.name + " with cards " + this.cardSet.toString();
	}

	/**
	 * Creates a hash code for the object. 
	 * The hash code is generated by considering the wallet's name and card set.
	 * 
	 * @return the object's hash code.
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((cardSet == null) ? 0 : cardSet.hashCode());
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		return result;
	}

	/**
	 * Compares the wallet with another object for equality.
	 * Two PhoneCardWallet instances are equal if and only if
	 * their names are equal and their sets of cards are equal.
	 * 
	 * @param obj the object to compare with for equality.
	 * @return true if the wallet and object are equal; false otherwise.
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		PhoneCardWallet other = (PhoneCardWallet) obj;
		if (cardSet == null) {
			if (other.cardSet != null)
				return false;
		} else if (!cardSet.equals(other.cardSet)) // use Set equals to compare card sets
			return false;
		if (name == null) {
			if (other.name != null)
				return false;
		} else if (!name.equals(other.name))
			return false;
		return true;
	}

}
